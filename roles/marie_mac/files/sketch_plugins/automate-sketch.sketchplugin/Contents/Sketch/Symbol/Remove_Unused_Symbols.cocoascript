@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var sketch = context.api();
    var doc = context.document;

    // Dialog
    var dialog = NSAlert.alloc().init();
    dialog.setMessageText("Remove Unused Symbols");
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");
    var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 40));
    checkbox.setButtonType(NSSwitchButton);
    checkbox.setTitle(" Keep symbols with nested symbols which it is\n used.");
    checkbox.setState(NSOffState);
    dialog.setAccessoryView(checkbox);
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        var keepSymbols = checkbox.state();

        // Get all symbols used in overrides
        var idsOfSymbolInOverrides = [];
        var idsOfAllInstances = [];
        var pages = doc.pages();
        var loopPages = pages.objectEnumerator();
        var page;
        while (page = loopPages.nextObject()) {
            var children = page.children();
            var loopChildren = children.objectEnumerator();
            var layer;
            while (layer = loopChildren.nextObject()) {
                if (layer.class() == "MSSymbolInstance") {
                    idsOfAllInstances.push(String(layer.symbolID()));
                    if (layer.overrides()) {

                        var overrides = layer.overrides().allValues()

                        if (sketch.version < 44) {
                            overrides = layer.overrides().objectForKey(0).allValues();
                        }

                        for (var i = 0; i < overrides.count(); i++) {
                            pushOverrideSymbolIDtoArray(overrides.objectAtIndex(i), idsOfSymbolInOverrides);
                        }

                    }
                }
            }
        }

        var countGlobal = 0;

        removeUnusedSymbols();

        doc.showMessage("Remove " + countGlobal + " unused SymbolMaster.");

        function removeUnusedSymbols() {
            var count = 0;
            var allSymbolMasters = context.document.documentData().allSymbols();

            var loopSymbols = allSymbolMasters.objectEnumerator();
            var symbolMaster;
            while (symbolMaster = loopSymbols.nextObject()) {

                if (
                    !symbolMaster.hasInstances() &&
                    idsOfSymbolInOverrides.indexOf(String(symbolMaster.symbolID())) == -1
                ) {
                    if (keepSymbols == 1) {
                        var hasUsedInstances = 0;
                        var loopLayers = symbolMaster.children().objectEnumerator();
                        var layer;
                        while (layer = loopLayers.nextObject()) {
                            if (
                                layer.class() == "MSSymbolInstance" &&
                                idsOfAllInstances.indexOf(String(layer.symbolID())) != -1
                            ) {
                                hasUsedInstances ++;
                            }
                        }
                        if (hasUsedInstances == 0) {
                            removeSymbol(context, symbolMaster);
                            count ++;
                            countGlobal ++;
                        }
                    } else {
                        removeSymbol(context, symbolMaster);
                        count ++;
                        countGlobal ++;
                    }
                }
            }
            if (count != 0) {
                removeUnusedSymbols();
            }
        }

        function pushOverrideSymbolIDtoArray(overrideObject, array) {
            if (overrideObject.isKindOfClass(NSDictionary.class())) {
                if (overrideObject.objectForKey("symbolID")) {
                    array.push(String(overrideObject.objectForKey("symbolID")));
                }
                for (var i = 0; i < overrideObject.allValues().count(); i ++) {
                    pushOverrideSymbolIDtoArray(overrideObject.allValues().objectAtIndex(i), array);
                }
            }
        }

    }

    ga(context, "UA-99098773-3", "Symbol", context.command.identifier());

};

function removeSymbol(context, symbolMaster) {
    if (MSApplicationMetadata.metadata().appVersion < 47) {
        symbolMaster.removeFromParent();
    } else {
        if (symbolMaster.isForeign()) {
            var documentData = context.document.documentData();
            documentData.removeForeignSymbol(symbolMaster.foreignSymbol());
        } else {
            symbolMaster.removeFromParent();
        }
    }
}
